//------------------------------------------------------------------------------
// <auto-generated>
//     Este código foi gerado por uma ferramenta
//     As alterações neste arquivo serão perdidas se o código for recriado
// </auto-generated>
//------------------------------------------------------------------------------
using System.Data;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Forms;

namespace RegraNegocio
{
    public class DisciplinaRegraNegocio
    {
        private AcessoDados.DisciplinaAcessoDados disciplinaAD;
        private AcessoDados.FaseAcessoDados faseAD;
        private Form frmDisciplina;

        public DisciplinaRegraNegocio(Form frm)
        {
            frmDisciplina = frm;
        }

        // Insere uma disciplina no banco.
        public void InsereDisciplina(Modelos.DISCIPLINA disciplina, DataGridView disciplinaRequisito, DataTable turmaAntiga, DataTable turmaNova)
        {
            VerificaDisciplina(disciplina);
            VerificaRequisitos(disciplina, disciplinaRequisito);

            try
            {
                disciplinaAD = new AcessoDados.DisciplinaAcessoDados();
                disciplinaAD.InsereDisciplina(disciplina, disciplinaRequisito, turmaAntiga, turmaNova);
            }
            catch (Exception ex)
            {
                throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
            }
        }

        // Edita uma disciplina cadastrada.
        public void EditaDisciplina(
            Modelos.DISCIPLINA disciplinaAntiga,
            Modelos.DISCIPLINA disciplinaNova,
            DataTable requisitoAntigo,
            DataTable requisitoNovo,
            DataTable turmaAntiga,
            DataTable turmaNova)
        {
            VerificaDisciplina(disciplinaNova);
            VerificaRequisitos(disciplinaNova, requisitoNovo);

            try
            {
                disciplinaAD = new AcessoDados.DisciplinaAcessoDados();

                disciplinaAD.EditaDisciplina(disciplinaAntiga, disciplinaNova, requisitoAntigo, requisitoNovo, turmaAntiga, turmaNova);
            }
            catch (Exception ex)
            {
                throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
            }
        }

        // Apaga uma disciplina informada.
        public void ApagaDisciplina(Modelos.DISCIPLINA disciplina)
        {
            try
            {
                if (disciplina.CODIGO_DISCIPLINA.Trim() == "")
                {
                    throw new Exception("O campo código não pode ser vazio!");
                }

                Modelos.DISCIPLINA temp = SelecionaDisciplina(disciplina.CODIGO_DISCIPLINA);

                if (temp == null)
                {
                    throw new Exception("A disciplina não existe!\nVerifique se existe alguma aplicação externa que possa estar interagindo com o banco de dados e feche-a!");
                }

                if (VerificaERequisito(temp) == true)
                {
                    throw new Exception("Não é possível excluir a disciplina selecionada pois ela é requisito de uma ou mais disciplinas.\nRetire-a do papel de requisito é tente novamente.");
                }

                if (VerificaAlocacao(temp) == true)
                {
                    throw new Exception("Não é possível excluir a disciplina selecionada!\nEla faz parte do currículo de algum curso.");
                }

                disciplinaAD = new AcessoDados.DisciplinaAcessoDados();
                disciplinaAD.ApagaDisciplina(disciplina);
            }
            catch (Exception ex)
            {
                throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
            }
        }

        //public void SalvaTurmas(string disciplina, DataTable turmaAntiga, DataTable turmaNova)
        //{
        //    int curso = 0;
        //    int fase = 0;
        //    string turma = "";
        //    char aux = '\0';

        //    try
        //    {
        //        disciplinaAD = new AcessoDados.DisciplinaAcessoDados();
        //        faseAD = new AcessoDados.FaseAcessoDados();

        //        // Caso não tenha nenhuma turma naquela disciplina já cadastrada.
        //        if (turmaAntiga.Rows.Count == 0)
        //        {
        //            Modelos.DISCIPLINA_CURSO novaTurmaFase;
        //            List<Modelos.DISCIPLINA_CURSO> listaFase = new List<Modelos.DISCIPLINA_CURSO>();

        //            for (int i = 0; i < turmaNova.Rows.Count; i++)
        //            {
        //                turma = turmaNova.Rows[i].Field<string>("CODIGO_TURMA");

        //                Modelos.Utilidades.ExtractFromTurma(turma, ref fase, ref curso, ref aux);

        //                novaTurmaFase = new Modelos.DISCIPLINA_CURSO();
        //                novaTurmaFase.CODIGO_CURSO = curso;
        //                novaTurmaFase.CODIGO_DISCIPLINA = disciplina;
        //                novaTurmaFase.CODIGO_TURMA = turma;
        //                novaTurmaFase.FASE_DISCIPLINA_CURSO = fase;

        //                Modelos.DISCIPLINA_CURSO temp = faseAD.VerificaDisciplinaCurso(novaTurmaFase);

        //                if (temp != null)
        //                { // Arrumar
        //                    throw new Exception("A disciplina de código " + novaTurmaFase.CODIGO_DISCIPLINA + " já está vinculada à " + temp.FASE_DISCIPLINA_CURSO.ToString() + "ª fase desse curso.\nRemova a restrição e tente novamente.");
        //                }

        //                listaFase.Add(novaTurmaFase);
        //            }

        //            faseAD.InsereListaDisciplinaFase(listaFase);
        //        }
        //        else
        //        {
        //            Modelos.Utilidades.ExtractFromTurma(turma, ref fase, ref curso, ref aux);

        //            List<Modelos.DISCIPLINA_CURSO> listaEdita = new List<Modelos.DISCIPLINA_CURSO>();
        //            List<Modelos.DISCIPLINA_CURSO> listaExclui = new List<Modelos.DISCIPLINA_CURSO>();
        //            List<Modelos.DISCIPLINA_CURSO> listaInsere = new List<Modelos.DISCIPLINA_CURSO>();
        //            List<Modelos.DISCIPLINA_CURSO> listaFaseAntiga = faseAD.SelecionaFaseCurso(disciplina);
        //            List<Modelos.DISCIPLINA_CURSO> listaFaseNova = PreencheFase(turmaNova, fase, curso, disciplina);
        //            List<Modelos.DISCIPLINA_CURSO> lista = PreencheFase(turmaNova, fase, curso, disciplina);
        //            // lista FaseAntiga deve ser revisado para ter mais de um curso.
        //            for (int i = 0; i < listaFaseNova.Count; i++)
        //            {
        //                Modelos.DISCIPLINA_CURSO discLista = listaFaseAntiga.Find(
        //                    p =>
        //                    (p.CODIGO_DISCIPLINA == disciplina) &&
        //                    (p.CODIGO_CURSO == curso) &&
        //                    (p.CODIGO_TURMA == lista.ElementAt(i).CODIGO_TURMA));

        //                if (discLista == null)
        //                {
        //                    Modelos.DISCIPLINA_CURSO discFaseBD = faseAD.VerificaDisciplinaCurso(listaFaseNova.ElementAt(i));

        //                    if (discFaseBD != null)
        //                    {//REVER
        //                        throw new Exception("A disciplina de código " + listaFaseNova.ElementAt(i).CODIGO_DISCIPLINA + " já está vinculada à " + discFaseBD.FASE_DISCIPLINA_CURSO.ToString() + "ª fase desse curso.\nRemova a restrição e tente novamente.");
        //                    }

        //                    listaInsere.Add(listaFaseNova.ElementAt(i));
        //                }
        //                else
        //                {
        //                    listaEdita.Add(listaFaseNova.ElementAt(i));

        //                    listaFaseAntiga.Remove(listaFaseAntiga.Find(
        //                        p =>
        //                        (p.CODIGO_CURSO == listaFaseNova.ElementAt(i).CODIGO_CURSO) &&
        //                        (p.CODIGO_DISCIPLINA == listaFaseNova.ElementAt(i).CODIGO_DISCIPLINA) &&
        //                        (p.CODIGO_TURMA == listaFaseNova.ElementAt(i).CODIGO_TURMA)));
        //                }
        //            }

        //            for (int i = 0; i < listaFaseAntiga.Count; i++)
        //            {
        //                //Modelos.DISCIPLINA_CURSO temp = faseAD.SelecionaFaseCurso(fase, curso).Find(
        //                //    p =>
        //                //    (p.CODIGO_CURSO == listaFaseAntiga.ElementAt(i).CODIGO_CURSO) &&
        //                //    (p.CODIGO_DISCIPLINA == listaFaseAntiga.ElementAt(i).CODIGO_DISCIPLINA) &&
        //                //    (p.CODIGO_TURMA == listaFaseAntiga.ElementAt(i).CODIGO_TURMA));

        //                listaExclui.Add(listaFaseAntiga.ElementAt(i));
        //            }

        //            faseAD.SalvaFase(listaEdita, listaExclui, listaInsere);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
        //    }
        //}


        //

        private List<Modelos.DISCIPLINA_CURSO> PreencheFase(DataTable tabela, int fase, int curso, string disciplina)
        {
            Modelos.DISCIPLINA_CURSO temp;

            List<Modelos.DISCIPLINA_CURSO> lista = new List<Modelos.DISCIPLINA_CURSO>();

            for (int i = 0; i < tabela.Rows.Count; i++)
            {
                temp = new Modelos.DISCIPLINA_CURSO();
                temp.CODIGO_DISCIPLINA = disciplina;
                temp.CODIGO_TURMA = tabela.Rows[i].Field<string>("CODIGO_TURMA");
                temp.CODIGO_CURSO = curso;
                temp.FASE_DISCIPLINA_CURSO = fase;

                lista.Add(temp);
            }

            return lista;
        }

        //
        public DataTable SelecionaTurmaPorDisciplina(string disciplina)
        {
            try
            {
                disciplinaAD = new AcessoDados.DisciplinaAcessoDados();

                return disciplinaAD.SelecionaTurmaPorDisciplina(disciplina);
            }
            catch (Exception ex)
            {
                throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
            }
        }

        // Retorna uma lista com todas as disciplinas cadastradas.
        public DataTable SelecionaTodaDisciplina()
        {
            try
            {
                disciplinaAD = new AcessoDados.DisciplinaAcessoDados();

                return disciplinaAD.SelecionaTodaDisciplina();
            }
            catch (Exception ex)
            {
                throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
            }
        }

        // Seleciona a disciplina indicada
        public Modelos.DISCIPLINA SelecionaDisciplina(string codigoDisciplina)
        {
            try
            {
                disciplinaAD = new AcessoDados.DisciplinaAcessoDados();

                return disciplinaAD.SelecionaDisciplina(codigoDisciplina);
            }
            catch (Exception ex)
            {
                throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
            }
        }

        public bool VerificaTemTurmaAlocada(string codigoDisciplina)
        {
            faseAD = new AcessoDados.FaseAcessoDados();

            if (faseAD.SelecionaTurmaAlocada(codigoDisciplina) != null)
            {
                return true;
            }

            return false;
        }

        private bool VerificaTemRequisito(Modelos.DISCIPLINA disciplina)
        {
            disciplinaAD = new AcessoDados.DisciplinaAcessoDados();

            return disciplinaAD.VerificaTemRequisito(disciplina);
        }

        private bool VerificaERequisito(Modelos.DISCIPLINA disciplina)
        {
            disciplinaAD = new AcessoDados.DisciplinaAcessoDados();

            return disciplinaAD.VerificaERequisito(disciplina);
        }

        // Seleciona todo os departamentos.
        public DataTable SelecionaTodoDepartamento()
        {
            return AcessoDados.UtilidadeAcessoDados.SelecionaTodoDepartamento();
        }

        // Verifica os campos da disciplina informada.
        private void VerificaDisciplina(Modelos.DISCIPLINA disciplina)
        {
            if (disciplina.CODIGO_DISCIPLINA.Trim() == "")
            {
                throw new Exception("O campo de código da disciplina não pode ser vazio!");
            }
            if (disciplina.NOME_DISCIPLINA.Trim() == "")
            {
                throw new Exception("O campo de nome da disciplina não pode ser vazio!");
            }

            if (disciplina.CODIGO_DEPARTAMENTO == 0)
            {
                throw new Exception("É necessário escolher o departamento ao qual a disciplina será vinculada!");
            }
        }

        // Verifica a lista de requisitos para a disciplina informada.
        private void VerificaRequisitos(Modelos.DISCIPLINA disciplina, DataGridView requisitos)
        {
            for (int i = 0; i < requisitos.Rows.Count; i++)
            {
                if (requisitos.Rows[i].Cells["CODIGO_DISCIPLINA_REQUISITO"].Value.ToString() == disciplina.CODIGO_DISCIPLINA)
                {
                    throw new Exception("Existe alguma disciplina na tabela de requisitos com o mesmo código que a atual.\nUma disciplina não pode ser requisito de si própria.");
                }
            }
        }

        private void VerificaRequisitos(Modelos.DISCIPLINA disciplina, DataTable requisitos)
        {
            for (int i = 0; i < requisitos.Rows.Count; i++)
            {
                if (requisitos.Rows[i].Field<string>("CODIGO_DISCIPLINA") == disciplina.CODIGO_DISCIPLINA)
                {
                    throw new Exception("Existe alguma disciplina na tabela de requisitos com o mesmo código que a atual.\nUma disciplina não pode ser requisito de si própria.");
                }
            }
        }

        public DataTable SelecionaRequisito(Modelos.DISCIPLINA disciplina)
        {
            try
            {
                disciplinaAD = new AcessoDados.DisciplinaAcessoDados();

                return disciplinaAD.SelecionaRequisito(disciplina);
            }
            catch (Exception ex)
            {
                throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
            }
        }

        private bool VerificaAlocacao(Modelos.DISCIPLINA disciplina)
        {
            disciplinaAD = new AcessoDados.DisciplinaAcessoDados();

            return disciplinaAD.VerificaAlocacao(disciplina);
        }

        public DataTable SelecionaDisciplinaPorNome(string nome)
        {
            try
            {
                disciplinaAD = new AcessoDados.DisciplinaAcessoDados();

                return disciplinaAD.SelecionaDisciplinaPorNome(nome);
            }
            catch (Exception ex)
            {
                throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
            }
        }

        public DataTable SelecionaTodaTurma()
        {
            try
            {
                AcessoDados.TurmaAcessoDados turmas = new AcessoDados.TurmaAcessoDados();

                return turmas.SelecionaTodaTurma();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }
    }
}