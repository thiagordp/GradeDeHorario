//------------------------------------------------------------------------------
// <auto-generated>
//     Este código foi gerado por uma ferramenta
//     As alterações neste arquivo serão perdidas se o código for recriado
// </auto-generated>
//------------------------------------------------------------------------------
using System.Data;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Forms;

namespace RegraNegocio
{
    public class DisciplinaRegraNegocio
    {
        private AcessoDados.DisciplinaAcessoDados disciplinaAD;
        private Form frmDisciplina;


        public DisciplinaRegraNegocio(Form frm)
        {
            frmDisciplina = frm;
        }

        // Insere uma disciplina no banco.
        public void InsereDisciplina(Modelos.DISCIPLINA disciplina, DataGridView disciplinaRequisito)
        {
            VerificaDisciplina(disciplina);
            VerificaRequisitos(disciplina, disciplinaRequisito);

            try
            {
                disciplinaAD = new AcessoDados.DisciplinaAcessoDados();
                disciplinaAD.InsereDisciplina(disciplina, disciplinaRequisito);
            }
            catch (Exception ex)
            {
                throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
            }
        }

        // Edita uma disciplina cadastrada.
        public void EditaDisciplina(Modelos.DISCIPLINA disciplinaAntiga, Modelos.DISCIPLINA disciplinaNova, DataTable requisitoAntigo, DataTable requisitoNovo)
        {
            VerificaDisciplina(disciplinaNova);

            VerificaRequisitos(disciplinaNova, requisitoNovo);

            try
            {
                disciplinaAD = new AcessoDados.DisciplinaAcessoDados();
                disciplinaAD.EditaDisciplina(disciplinaAntiga, disciplinaNova, requisitoAntigo, requisitoNovo);
            }
            catch (Exception ex)
            {
                throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
            }
        }

        // Apaga uma disciplina informada.
        public void ApagaDisciplina()
        {

        }

        // Retorna uma lista com todas as disciplinas cadastradas.
        public DataTable SelecionaTodaDisciplina()
        {
            try
            {
                disciplinaAD = new AcessoDados.DisciplinaAcessoDados();

                return disciplinaAD.SelecionaTodaDisciplina();
            }
            catch (Exception ex)
            {
                throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
            }
        }

        // Seleciona a disciplina indicada
        public Modelos.DISCIPLINA SelecionaDisciplina(string codigoDisciplina)
        {
            try
            {
                disciplinaAD = new AcessoDados.DisciplinaAcessoDados();

                return disciplinaAD.SelecionaDisciplina(codigoDisciplina);
            }
            catch (Exception ex)
            {
                throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
            }
        }

        // Seleciona todo os departamentos.
        public DataTable SelecionaTodoDepartamento()
        {
            return AcessoDados.UtilidadeAcessoDados.SelecionaTodoDepartamento();
        }

        // Verifica os campos da disciplina informada.
        private void VerificaDisciplina(Modelos.DISCIPLINA disciplina)
        {
            if (disciplina.CODIGO_DISCIPLINA.Trim() == "")
            {
                throw new Exception("O campo de código da disciplina não pode ser vazio!");
            }
            if (disciplina.NOME_DISCIPLINA.Trim() == "")
            {
                throw new Exception("O campo de nome da disciplina não pode ser vazio!");
            }

            if (disciplina.CODIGO_DEPARTAMENTO == 0)
            {
                throw new Exception("É necessário escolher o departamento ao qual a disciplina será vinculada!");
            }

        }

        // Verifica a lista de requisitos para a disciplina informada.
        private void VerificaRequisitos(Modelos.DISCIPLINA disciplina, DataGridView requisitos)
        {
            for (int i = 0; i < requisitos.Rows.Count; i++)
            {
                if (requisitos.Rows[i].Cells["CODIGO_DISCIPLINA_REQUISITO"].Value.ToString() == disciplina.CODIGO_DISCIPLINA)
                {
                    throw new Exception("Existe alguma disciplina na tabela de requisitos com o mesmo código que a atual.\nUma disciplina não pode ser requisito de si própria.");
                }
            }
        }

        private void VerificaRequisitos(Modelos.DISCIPLINA disciplina, DataTable requisitos)
        {

            for (int i = 0; i < requisitos.Rows.Count; i++)
            {
                if (requisitos.Rows[i].Field<string>("CODIGO_DISCIPLINA") == disciplina.CODIGO_DISCIPLINA)
                {
                    throw new Exception("Existe alguma disciplina na tabela de requisitos com o mesmo código que a atual.\nUma disciplina não pode ser requisito de si própria.");
                }
            }
        }

        public DataTable SelecionaRequisito(Modelos.DISCIPLINA disciplina)
        {
            try
            {
                disciplinaAD = new AcessoDados.DisciplinaAcessoDados();

                return disciplinaAD.SelecionaRequisito(disciplina);
            }
            catch (Exception ex)
            {
                throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
            }

        }
    }
}