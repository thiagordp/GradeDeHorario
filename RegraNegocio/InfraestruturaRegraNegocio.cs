//------------------------------------------------------------------------------
// <auto-generated>
//     Este código foi gerado por uma ferramenta
//     As alterações neste arquivo serão perdidas se o código for recriado
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class InfraestruturaRegraNegocio
{
    InfraestruturaAcessoDados infraEstrutura;


    //Seleciona todos os espacos
    public List<Modelos.ESPACO> SelecionaTodaInfraEstrutura()
    {
        try
        {
            infraEstrutura = new InfraestruturaAcessoDados();

            return infraEstrutura.SelecionaTodaInfraEstutura();
        }
        catch (Exception ex)
        {
            throw new Exception("Erro no método SelecionaTodaEstrutura.\n\nDetalhe: \n\n" + ex.Message);
        }

    }


    // Verifica o novo registro e caso esteja correto, a camada de dados o armazenará.
    // Caso o registro apresente algum erro, este será reportado ao usuário.
    public void InsereInfraEstrutura(Modelos.ESPACO espaco)
    {
        VerificaInfraEstrutura(espaco);

        try
        {
            using (Modelos.Entidade contexto = new Modelos.Entidade())
            {
                Modelos.ESPACO espacoExiste = contexto.ESPACO.Find(espaco.CODIGO_ESPACO);

                if (espacoExiste != null)
                {
                    throw new Exception("O espaço com a identificação informada já está cadastrado.");
                }

                contexto.ESPACO.Add(espaco);
                contexto.SaveChanges();
            }
        }
        catch (Exception ex)
        {
            throw new Exception("Erro no método InsereInfraEstrutura\n\nDetalhe:\n\n" + ex.Message);
        }
    }

    // Verifica o novo registro e caso esteja correto, a camada de dados o armazenará.
    // Caso o registro apresente algum erro, este será reportado ao usuário.
    public void EditaInfraEstrutura(Modelos.ESPACO espacoAtual, Modelos.ESPACO espacoNovo)
    //tempEspaco = contexto.ESPACO.Where(esp => esp.CODIGO_ESPACO == espacoNovo.CODIGO_ESPACO).FirstOrDefault();
    //contexto.Entry(tempEspaco).State = System.Data.Entity.EntityState.Modified; // Marca a entidade como modificada
    {

        try
        {
            VerificaInfraEstrutura(espacoNovo);

            Modelos.ESPACO tempEspaco;

            using (Modelos.Entidade contexto = new Modelos.Entidade())
            {
                tempEspaco = contexto.ESPACO.Where(esp => esp.CODIGO_ESPACO == espacoNovo.CODIGO_ESPACO).FirstOrDefault();

                if (espacoAtual.CODIGO_ESPACO != espacoNovo.CODIGO_ESPACO) // Delete e insert espaço
                {
                    if (tempEspaco != null)
                    {
                        throw new Exception("O novo código para o espaço já está cadastrado no banco!");
                    }

                    contexto.ESPACO.Add(espacoNovo); // Adiciona o novo espaço.

                    //Como insiriu-se um novo objeto, é necessário apagar o antigo.
                    tempEspaco = contexto.ESPACO.Where(esp => esp.CODIGO_ESPACO == espacoAtual.CODIGO_ESPACO).FirstOrDefault();
                    if (tempEspaco != null)
                    {
                        contexto.Entry(tempEspaco).State = System.Data.Entity.EntityState.Deleted; //Altera o estado do objeto.
                    }
                }
                else // update
                {
                    if (tempEspaco == null)
                    {
                        throw new Exception("Objeto não encontrado!\nVerifique se há algum programa alterando o banco de dados.");
                    }

                    tempEspaco.CAPACIDADE_ESPACO = espacoAtual.CAPACIDADE_ESPACO;
                    tempEspaco.CODIGO_ESPACO = espacoAtual.CODIGO_ESPACO;
                    tempEspaco.INTERNET_ESPACO = espacoAtual.INTERNET_ESPACO;
                    tempEspaco.NUMERO_PC_ESPACO = espacoAtual.NUMERO_PC_ESPACO;
                    tempEspaco.PROJETOR_ESPACO = espacoAtual.PROJETOR_ESPACO;
                    tempEspaco.QUADRO_BRANCO_ESPACO = espacoAtual.QUADRO_BRANCO_ESPACO;
                    tempEspaco.QUADRO_VIDRO_ESPACO = espacoAtual.QUADRO_VIDRO_ESPACO;
                    tempEspaco.TIPO_ESPACO = espacoAtual.TIPO_ESPACO;

                    contexto.Entry(tempEspaco).State = System.Data.Entity.EntityState.Modified; // Marca a entidade como modificada

                }
                contexto.SaveChanges();     //Salva as alterações
            }
        }
        catch (Exception ex)
        {
            throw new Exception("Erro no método EditaInfraEstrutura\n\nDetalhe:\n\n" + ex.Message);
        }



    }

    // Verifica os campos do Espaço informado.
    private void VerificaInfraEstrutura(Modelos.ESPACO espaco)
    {
        if (espaco.CODIGO_ESPACO.Trim() == "")
        {
            throw new Exception("O campo código do espaço não pode ser vazio!");
        }
        if (espaco.CAPACIDADE_ESPACO == 0)
        {
            throw new Exception("A capacidade deve ser maior que zero!");
        }
        if (espaco.TIPO_ESPACO == "")
        {
            throw new Exception("Selecione um tipo de espaço!");
        }
        if (espaco.NUMERO_PC_ESPACO == 0)
        {
            throw new Exception("O número de computadores deve ser maior que zero!");
        }
    }
}

