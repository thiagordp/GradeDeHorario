//------------------------------------------------------------------------------
// <auto-generated>
//     Este código foi gerado por uma ferramenta
//     As alterações neste arquivo serão perdidas se o código for recriado
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class InfraestruturaRegraNegocio
{
    InfraestruturaAcessoDados infraEstrutura;


    //Seleciona todos os espacos
    public List<Modelos.ESPACO> SelecionaTodaInfraEstrutura()
    {
        try
        {
            infraEstrutura = new InfraestruturaAcessoDados();

            return infraEstrutura.SelecionaTodaInfraEstrutura();
        }
        catch (Exception ex)
        {
            throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
        }

    }

    // Verifica o novo registro e caso esteja correto, a camada de dados o armazenará.
    // Caso o registro apresente algum erro, este será reportado ao usuário.
    public void InsereInfraEstrutura(Modelos.ESPACO espaco)
    {
        VerificaInfraEstrutura(espaco);
        try
        {

            infraEstrutura = new InfraestruturaAcessoDados();

            infraEstrutura.InsereInfraEstrutura(espaco);
        }
        catch (Exception ex)
        {
            throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
        }
    }

    // Verifica o novo registro e caso esteja correto, a camada de dados o armazenará.
    // Caso o registro apresente algum erro, este será reportado ao usuário.
    public void EditaInfraEstrutura(Modelos.ESPACO espacoAtual, Modelos.ESPACO espacoNovo)
    {
        VerificaInfraEstrutura(espacoNovo);

        try
        {
            infraEstrutura = new InfraestruturaAcessoDados();


            infraEstrutura.EditaInfraEstrutura(espacoAtual, espacoNovo);
        }
        catch (Exception ex)
        {
            throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
        }
    }

    // Verifica os campos do Espaço informado.
    private void VerificaInfraEstrutura(Modelos.ESPACO espaco)
    {
        if (espaco.CODIGO_ESPACO.Trim() == "")
        {
            throw new Exception("O campo código do espaço não pode ser vazio!");
        }
        if (espaco.CAPACIDADE_ESPACO == 0)
        {
            throw new Exception("A capacidade deve ser maior que zero!");
        }
        if (espaco.TIPO_ESPACO == "")
        {
            throw new Exception("Selecione um tipo de espaço!");
        }
        if (espaco.TIPO_ESPACO == "LABORATÓRIO" && espaco.NUMERO_PC_ESPACO == 0)
        {
            throw new Exception("O número de computadores deve ser maior que zero!");
        }
    }

    // Apaga o objeto de InfraEstrutura indicado.
    public void ApagaInfraEstrutura(Modelos.ESPACO espaco)
    {
        VerificaInfraEstrutura(espaco);

        try
        {
            infraEstrutura = new InfraestruturaAcessoDados();
            infraEstrutura.ApagaInfraEstrutura(espaco);
        }
        catch (Exception ex)
        {
            throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
        }
    }
    public List<Modelos.ESPACO> SelecionaInfraEstrutura(string codigoEspaco)
    {
        try
        {
            infraEstrutura = new InfraestruturaAcessoDados();

            return infraEstrutura.SelecionaInfraEstrutura(codigoEspaco);
        }
        catch (Exception ex)
        {
            throw new Exception("Erro no método " + System.Reflection.MethodBase.GetCurrentMethod().Name + "\n\nDetalhe:\n\n" + ex.Message);
        }
    }
}

